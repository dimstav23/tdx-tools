diff --git a/CI-Examples/blender/Makefile b/CI-Examples/blender/Makefile
index 17831aee..6a255a47 100644
--- a/CI-Examples/blender/Makefile
+++ b/CI-Examples/blender/Makefile
@@ -63,7 +63,7 @@ $(DATA_DIR)/images:
 
 .PHONY: check
 check: all
-	cd $(RUN_DIR) && DATA_DIR=$(DATA_DIR) sh $(PWD)/test_all_scenes.sh
+	cd $(RUN_DIR) && DATA_DIR=$(DATA_DIR) sh $(PWD)/test_all_scenes.sh $(VARIANT) $(THREADS)
 
 .PHONY: clean
 clean:
diff --git a/CI-Examples/blender/blender.manifest.template b/CI-Examples/blender/blender.manifest.template
index 14c8bb05..018e9354 100644
--- a/CI-Examples/blender/blender.manifest.template
+++ b/CI-Examples/blender/blender.manifest.template
@@ -23,8 +23,8 @@ fs.mounts = [
 sgx.debug = true
 sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
 sys.stack.size = "8M"
-sgx.enclave_size = "2048M"
-sgx.max_threads = 64
+sgx.enclave_size = "4G"
+sgx.max_threads = 512
 
 sgx.trusted_files = [
   "file:{{ gramine.libos }}",
diff --git a/CI-Examples/blender/test_all_scenes.sh b/CI-Examples/blender/test_all_scenes.sh
index de087906..a2520890 100755
--- a/CI-Examples/blender/test_all_scenes.sh
+++ b/CI-Examples/blender/test_all_scenes.sh
@@ -2,6 +2,9 @@
 
 set -e
 
+VARIANT=$1
+THREADS=$2
+
 if test -n "$SGX"
 then
     GRAMINE=gramine-sgx
@@ -9,10 +12,17 @@ else
     GRAMINE=gramine-direct
 fi
 
+if [ "$VARIANT" = "gramine-tdx" ]; then
+    GRAMINE=gramine-tdx
+elif [ "$VARIANT" = "gramine-vm" ]; then
+    GRAMINE=gramine-vm
+fi
+
 for i in `ls "$DATA_DIR"/scenes/`;
 do
     rm -f "$DATA_DIR"/images/"$i"0001.png
-    $GRAMINE "../blender" -b /data/scenes/$i -t 4 -F PNG -o /data/images/$i -f 1
+    $GRAMINE "../blender" -b /data/scenes/$i -t $THREADS -F PNG -o /data/images/$i -f 1 \
+        | grep "Saving" | tee ../results/"$VARIANT"_"$THREADS"_threads.txt
     # TODO add a better test, probably some diff with a precomputed image
     [ -f "$DATA_DIR"/images/"$i"0001.png ]
 done
diff --git a/CI-Examples/memcached/memcached.manifest.template b/CI-Examples/memcached/memcached.manifest.template
index 33524de3..414f6e92 100644
--- a/CI-Examples/memcached/memcached.manifest.template
+++ b/CI-Examples/memcached/memcached.manifest.template
@@ -7,6 +7,7 @@ loader.log_level = "{{ log_level }}"
 
 # the only dependency is libevent.so, found under `/usr/{{ arch_libdir }}`
 loader.env.LD_LIBRARY_PATH = "/lib:/usr/{{ arch_libdir }}"
+loader.insecure__use_cmdline_argv = true
 
 # Gramine by default reports the root user (uid = 0) to applications. This default behavior forces
 # Memcached to attempt to drop privileges and assume some non-privileged user ID via setuid(), which
@@ -29,7 +30,7 @@ fs.mounts = [
 
 sgx.debug = true
 sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
-sgx.max_threads = 16
+sgx.max_threads = 256
 
 # Memcached does not fail explicitly when enclave memory is exhausted. Instead, Memcached goes into
 # infinite loop without a listening socket. You can trigger this incorrect behavior by increasing
diff --git a/CI-Examples/python/python.manifest.template b/CI-Examples/python/python.manifest.template
index b26898b1..40d0f1e9 100644
--- a/CI-Examples/python/python.manifest.template
+++ b/CI-Examples/python/python.manifest.template
@@ -10,7 +10,10 @@ loader.env.LD_LIBRARY_PATH = "/lib:/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}
 # Python's NumPy spawns as many threads as there are CPU cores, and each thread
 # consumes a chunk of memory, so on large machines 1G enclave size may be not enough.
 # We limit the number of spawned threads via OMP_NUM_THREADS env variable.
-loader.env.OMP_NUM_THREADS = "4"
+loader.env.OMP_NUM_THREADS = { passthrough = true }
+# Similarly with the scipy via the OPENBLAS_NUM_THREADS
+loader.env.OPENBLAS_NUM_THREADS = { passthrough = true }
+loader.env.QEMU_CPU_NUM = { passthrough = true }
 
 loader.insecure__use_cmdline_argv = true
 
@@ -29,13 +32,13 @@ fs.mounts = [
   { type = "tmpfs", path = "/tmp" },
 ]
 
-sys.stack.size = "2M"
+sys.stack.size = "8M"
 sys.enable_extra_runtime_domain_names_conf = true
 
 sgx.debug = true
 sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
-sgx.enclave_size = "1G"
-sgx.max_threads = 32
+sgx.enclave_size = "8G"
+sgx.max_threads = 256
 
 sgx.remote_attestation = "{{ ra_type }}"
 sgx.ra_client_spid = "{{ ra_client_spid }}"
diff --git a/CI-Examples/python/scripts/test-numpy.py b/CI-Examples/python/scripts/test-numpy.py
index 5c25eb3b..e5031285 100644
--- a/CI-Examples/python/scripts/test-numpy.py
+++ b/CI-Examples/python/scripts/test-numpy.py
@@ -2,19 +2,18 @@
 
 import timeit
 
+setup = """\
+import os
+omp_num_threads = str(os.getenv("OMP_NUM_THREADS", os.cpu_count()))
+# set number of threads to 1 during import to avoid import scheduling issues
+os.environ["OMP_NUM_THREADS"] = "1"
 import numpy
-
-try:
-    import numpy.core._dotblas
-except ImportError:
-    pass
-
-print("numpy version: " + numpy.__version__)
-
+# set back number of threads for the parallel execution
+os.environ["OMP_NUM_THREADS"] = omp_num_threads
+print("Number of threads: %d" % int(omp_num_threads), flush=True)
 x = numpy.random.random((1000, 1000))
+"""
 
-setup = "import numpy; x = numpy.random.random((1000, 1000))"
-count = 5
-
+count = 1000
 t = timeit.Timer("numpy.dot(x, x.T)", setup=setup)
 print("numpy.dot: " + str(t.timeit(count)/count) + " sec")
diff --git a/CI-Examples/python/scripts/test-scipy.py b/CI-Examples/python/scripts/test-scipy.py
index de57ee6a..fe3be217 100644
--- a/CI-Examples/python/scripts/test-scipy.py
+++ b/CI-Examples/python/scripts/test-scipy.py
@@ -3,15 +3,25 @@
 import timeit
 
 setup = """\
+import os
+omp_num_threads = str(os.getenv("OMP_NUM_THREADS", os.cpu_count()))
+# set number of threads to 1 during import to avoid import scheduling issues
+os.environ["OMP_NUM_THREADS"] = "1"
 import numpy
 import scipy.linalg as linalg
-x = numpy.random.random((100,100))
+import scipy.fft as fft
+# set back number of threads for the parallel execution
+os.environ["OMP_NUM_THREADS"] = omp_num_threads
+print("Number of threads: %d" % int(omp_num_threads), flush=True)
+x = numpy.random.random((1000,1000))
 z = numpy.dot(x, x.T)
 """
-count = 5
 
-t = timeit.Timer("linalg.cholesky(z, lower=True)", setup=setup)
-print("linalg.cholesky: " + str(t.timeit(count)/count) + "sec")
+count = 1000
+t = timeit.Timer("fft.fft2(z)", setup=setup)
+print("fft.fft2: " + str(t.timeit(count)/count) + " sec")
 
+# Reduce the count as it takes a lot of time to run otherwise
+count = 100
 t = timeit.Timer("linalg.svd(z)", setup=setup)
-print("linalg.svd: " + str(t.timeit(count)/count) + "sec")
+print("linalg.svd: " + str(t.timeit(count)/count) + " sec")
\ No newline at end of file
diff --git a/CI-Examples/redis/redis-server.manifest.template b/CI-Examples/redis/redis-server.manifest.template
index 58c9dddc..97191e22 100644
--- a/CI-Examples/redis/redis-server.manifest.template
+++ b/CI-Examples/redis/redis-server.manifest.template
@@ -18,7 +18,7 @@ loader.log_level = "{{ log_level }}"
 ################################# ARGUMENTS ###################################
 
 # Hardcode application arguments. See README for explanations.
-loader.argv = ["redis-server", "--save", ""]
+loader.argv = ["redis-server", "--save", "", "--protected-mode", "no"]
 
 ################################# ENV VARS ####################################
 
diff --git a/CI-Examples/sqlite/Makefile b/CI-Examples/sqlite/Makefile
index 51a0920d..cfacb49a 100644
--- a/CI-Examples/sqlite/Makefile
+++ b/CI-Examples/sqlite/Makefile
@@ -7,25 +7,29 @@ GRAMINE_LOG_LEVEL = error
 endif
 
 .PHONY: all
-all: sqlite3.manifest
+all: kvtest kvtest.manifest
 ifeq ($(SGX),1)
-all: sqlite3.manifest.sgx sqlite3.sig
+all: kvtest kvtest.manifest.sgx kvtest.sig
 endif
 
-sqlite3.manifest: manifest.template
+# Compile command: https://www.sqlite.org/fasterthanfs.html
+kvtest: kvtest.c sqlite3.c sqlite3.h
+	gcc -Os -I. -DSQLITE_DIRECT_OVERFLOW_READ \
+  kvtest.c sqlite3.c -o kvtest -ldl -lpthread
+
+kvtest.manifest: manifest.template
 	gramine-manifest \
 		-Dlog_level=$(GRAMINE_LOG_LEVEL) \
-		-Dexecdir=$(shell dirname $(shell which sqlite3)) \
 		-Darch_libdir=$(ARCH_LIBDIR) \
 		$< >$@
 
 # Make on Ubuntu <= 20.04 doesn't support "Rules with Grouped Targets" (`&:`),
 # see the helloworld example for details on this workaround.
-sqlite3.manifest.sgx sqlite3.sig: sgx_sign
+kvtest.manifest.sgx kvtest.sig: sgx_sign
 	@:
 
 .INTERMEDIATE: sgx_sign
-sgx_sign: sqlite3.manifest
+sgx_sign: kvtest.manifest
 	gramine-sgx-sign \
 		--manifest $< \
 		--output $<.sgx
@@ -53,7 +57,7 @@ regression: all
 
 .PHONY: clean
 clean:
-	$(RM) *.manifest *.manifest.sgx *.token *.sig OUTPUT db/*
+	$(RM) *.manifest *.manifest.sgx *.token *.sig OUTPUT db/* kvtest
 
 .PHONY: distclean
 distclean: clean
diff --git a/CI-Examples/sqlite/manifest.template b/CI-Examples/sqlite/manifest.template
index 9f5a78d5..23c96f54 100644
--- a/CI-Examples/sqlite/manifest.template
+++ b/CI-Examples/sqlite/manifest.template
@@ -1,24 +1,21 @@
 # This is a general manifest template for running SQLite.
 
 loader.entrypoint = "file:{{ gramine.libos }}"
-libos.entrypoint = "{{ execdir }}/sqlite3"
-
+libos.entrypoint = "/kvtest"
 loader.log_level = "{{ log_level }}"
-
-loader.argv = ["sqlite3", "/db/test.db"]
-
 loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"
-loader.env.PATH = "{{ execdir }}"
 # Set HOME to suppress "warning: cannot find home directory; cannot read ~/.sqliterc"
 loader.env.HOME = "/"
 
+loader.insecure__use_cmdline_argv = true
+
 fs.mounts = [
   { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
   { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
-  { path = "{{ execdir }}/sqlite3", uri = "file:{{ execdir }}/sqlite3" },
+  { path = "/kvtest", uri = "file:kvtest" },
 
   # SQLite creates several helper files for the DB, so we specify a path instead of a single file
-  { type = "encrypted", path = "/db/", uri = "file:db/", key_name = "default" },
+  #{ type = "encrypted", path = "/db", uri = "file:/db", key_name = "default" },
 ]
 
 # Unfortunately, non-SGX Gramine cannot use special keys such as "_sgx_mrenclave", so for this
@@ -28,13 +25,17 @@ fs.insecure__keys.default = "ffeeddccbbaa99887766554433221100"
 
 sgx.debug = true
 sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
-sgx.enclave_size = "256M"
-sgx.max_threads = 4
+sgx.enclave_size = "4G"
+sgx.max_threads = 256
 
 sgx.trusted_files = [
   "file:{{ gramine.libos }}",
-  "file:{{ execdir }}/sqlite3",
+  "file:kvtest",
   "file:{{ gramine.runtimedir() }}/",
   "file:{{ arch_libdir }}/",
   "file:scripts/",
 ]
+
+sgx.allowed_files = [
+  "file:db/test.db",
+]
