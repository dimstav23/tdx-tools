#!/usr/bin/expect -f

# starts guest vm, run benchmarks, poweroff
set timeout -1

set curr_dir [file normalize [file dirname $argv0]]

# first argument indicates td type: td or efi
set vm_type [lindex $argv 0];
# second argument indicates number of cores
set cores [lindex $argv 1];
# third argument indicates gigs of memory for the VM
set memory [lindex $argv 2];
# fourth argument indicates EPC memory for the VM (only for SGX vm_type)
set epc_memory [lindex $argv 3];

# Start the guest VM
if { $vm_type == "gramine-direct" || $vm_type == "gramine-sgx" } {
  spawn sudo numactl --cpunodebind=0 --membind=0 $curr_dir/../../../start-qemu.sh -i $curr_dir/../../common/VM/td-guest-ubuntu-22.04.qcow2 -k $curr_dir/../../common/VM/vmlinuz -t sgx -b direct -c $cores -g $memory -u $epc_memory
} else {
  spawn sudo numactl --cpunodebind=0 --membind=0 $curr_dir/../../../start-qemu.sh -i $curr_dir/../../common/VM/td-guest-ubuntu-22.04.qcow2 -k $curr_dir/../../common/VM/vmlinuz -t $vm_type -b direct -c $cores -g $memory 
}
# Login process
expect "login: "
# Enter username
send -- "root\r"

# Enter Password
expect "Password: "
send -- "123456\r"

# Expect the login to be done
expect "# "
send -- "cd /root/gramine/CI-Examples/sqlite-tmpfs\r"
# Expect the cd to be done
expect "# "
# wait for the VM (especially the SGX-enabled) to be properly initialized
sleep 20
if { $vm_type == "gramine-direct" || $vm_type == "gramine-sgx" } {
  # to ensure that the SGX key exists in the VM
  send -- "gramine-sgx-gen-private-key\r"
  expect -- "# "
  send -- "make clean && make SGX=1\r"
  # db init process is embedded in kvtest.c
  expect "# "
  send -- "${vm_type} kvtest run db/test.db --count 500k --stats \
  | tail -n 4 | tee ./results/read_vm-${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "${vm_type} kvtest run db/test.db --count 500k --stats --random \
  | tail -n 4 | tee ./results/read-random_vm-${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "${vm_type} kvtest run db/test.db --count 500k --stats --update \
  | tail -n 4 | tee ./results/update_vm-${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "${vm_type} kvtest run db/test.db --count 500k --stats --update --random \
  | tail -n 4 | tee ./results/update-random_vm-${vm_type}_${cores}_threads.txt\r"
} else {
  send -- "make clean && make kvtest\r"
  expect -- "# "
  send -- "sudo mount -t tmpfs -o size=4G tmpfs ./db\r"
  expect -- "# "
  # db init process is embedded in kvtest.c
  send -- "./kvtest run db/test.db --count 500k --stats \
  | tail -n 4 | tee ./results/read_${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "rm -f db/*\r"
  expect "# "
  send -- "./kvtest run db/test.db --count 500k --stats --random \
  | tail -n 4 | tee ./results/read-random_${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "rm -f db/*\r"
  expect "# "
  send -- "./kvtest run db/test.db --count 500k --stats --update \
  | tail -n 4 | tee ./results/update_${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "rm -f db/*\r"
  expect "# "
  send -- "./kvtest run db/test.db --count 500k --stats --update --random \
  | tail -n 4 | tee ./results/update-random_${vm_type}_${cores}_threads.txt\r"
  expect "# "
  send -- "rm -f db/*\r"
  expect "# "
  send -- "sudo umount ./db\r"
}

# expect the experiment to finish and poweroff the Guest VM
expect "# "
send -- "shutdown -h now\r"
# wait till the VM shuts down
expect "$ "
