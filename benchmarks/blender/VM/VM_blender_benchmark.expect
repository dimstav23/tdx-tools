#!/usr/bin/expect -f

# starts guest vm, run benchmarks, poweroff
set timeout -1

set curr_dir [file normalize [file dirname $argv0]]

# first argument indicates td type: td or efi
set vm_type [lindex $argv 0];
# second argument indicates number of cores
set cores [lindex $argv 1];
# third argument indicates gigs of memory for the VM
set memory [lindex $argv 2];
# fourth argument indicates EPC memory for the VM (only for SGX vm_type)
set epc_memory [lindex $argv 3];

# Start the guest VM
if { $vm_type == "sgx" } {
  spawn sudo numactl --cpunodebind=0 --membind=0 $curr_dir/../../../start-qemu.sh -i $curr_dir/../../common/VM/td-guest-ubuntu-22.04.qcow2 -k $curr_dir/../../common/VM/vmlinuz -t $vm_type -b direct -c $cores -g $memory -u $epc_memory
} else {
  spawn sudo numactl --cpunodebind=0 --membind=0 $curr_dir/../../../start-qemu.sh -i $curr_dir/../../common/VM/td-guest-ubuntu-22.04.qcow2 -k $curr_dir/../../common/VM/vmlinuz -t $vm_type -b direct -c $cores -g $memory 
}
# Login process
expect "login: "
# Enter username
send -- "root\r"

# Enter Password
expect "Password: "
send -- "123456\r"

# Expect the login to be done
expect "# "
send -- "cd /root/gramine/CI-Examples/blender\r"
# Expect the cd to be done
expect "# "
# wait for the VM (especially the SGX-enabled) to be properly initialized
sleep 20
if { $vm_type == "sgx" } {
  # run both the gramine-sgx and gramine-direct variants
  # to ensure that the SGX key exists in the VM
  send -- "gramine-sgx-gen-private-key\r"
  expect -- "# "
  send -- "make clean\r"
  expect -- "# "
  send -- "make check THREADS=$cores VARIANT=vm-gramine-direct\r"
  expect "# "
  send -- "make check SGX=1 THREADS=$cores VARIANT=vm-gramine-sgx\r"
} else {
  # Manual blender execution
  send -- "make clean && make\r"
  expect -- "# "
  send -- "rm -f ./data/images/simple_scene.blend0001.png\r"
  expect "# "
  send -- "export DATA_DIR=./data\r"
  expect "# "
  send -- "LD_LIBRARY_PATH=./blender_dir/lib/ ./blender_dir/blender \
  -b ./data/scenes/simple_scene.blend -t $cores -F PNG -o ./data/images/simple_scene.blend -f 1 \
  | grep \"Saving\" | tee ./results/${vm_type}_${cores}_threads.txt\r"
}
# expect the experiment to finish and poweroff the Guest VM
expect "# "
send -- "shutdown -h now\r"
# wait till the VM shuts down
expect "$ "
