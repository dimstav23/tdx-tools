diff --git a/openvino/Makefile b/openvino/Makefile
index 4a5ef25..a1d6585 100644
--- a/openvino/Makefile
+++ b/openvino/Makefile
@@ -3,13 +3,13 @@
 
 SHELL := /bin/bash # use bash syntax to activate virtual environment and to download models
 
-OPENVINO_DIR ?= $(INTEL_OPENVINO_DIR)
+# OPENVINO_DIR ?= $(INTEL_OPENVINO_DIR)
 
 THIS_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
 
 ARCH_LIBDIR ?= /lib/$(shell $(CC) -dumpmachine)
 
-INFERENCE_ENGINE_CPP_SAMPLES_BUILD ?= $(THIS_DIR)inference_engine_cpp_samples_build
+OPENVINO_DIR ?= $(THIS_DIR)/openvino_env
 
 MODEL_DIR ?= $(THIS_DIR)/model
 
@@ -23,7 +23,7 @@ PUBLIC_MODELS = \
 	brain-tumor-segmentation-0002 \
 	ssd_mobilenet_v1_coco
 
-VENV_DIR ?= $(THIS_DIR)/openvino
+VENV_DIR ?= $(THIS_DIR)/openvino_env
 
 ifeq ($(DEBUG),1)
 GRAMINE_LOG_LEVEL = debug
@@ -40,24 +40,24 @@ endif
 .PHONY: intel_models
 intel_models: $(VENV_DIR)/.INSTALLATION_OK
 	@source $(VENV_DIR)/bin/activate \
-	&& cd $(OPENVINO_DIR)/deployment_tools/open_model_zoo/tools/downloader \
+	&& cd $(OPENVINO_DIR)/bin \
 	&& for model in $(INTEL_MODELS); do \
 		if [ ! -d $(abspath $(MODEL_DIR))/intel/$$model ]; then \
-			python3 ./downloader.py --name $$model -o $(abspath $(MODEL_DIR)); \
-			python3 ./converter.py --name $$model -d $(abspath $(MODEL_DIR)) -o $(abspath $(MODEL_DIR)); \
-		fi; \
+			python3 ./omz_downloader --name $$model -o $(abspath $(MODEL_DIR)); \
+			python3 ./omz_converter --name $$model -d $(abspath $(MODEL_DIR)) -o $(abspath $(MODEL_DIR)); \
+ 		fi; \
 	done \
 	&& deactivate
 
 .PHONY: public_models
 public_models: $(VENV_DIR)/.INSTALLATION_OK
 	@source $(VENV_DIR)/bin/activate \
-	&& cd $(OPENVINO_DIR)/deployment_tools/open_model_zoo/tools/downloader \
+	&& cd $(OPENVINO_DIR)/bin \
 	&& for model in $(PUBLIC_MODELS); do \
 		if [ ! -d $(abspath $(MODEL_DIR))/public/$$model ]; then \
-			python3 ./downloader.py --name $$model -o $(abspath $(MODEL_DIR)); \
-			python3 ./converter.py --name $$model -d $(abspath $(MODEL_DIR)) -o $(abspath $(MODEL_DIR)); \
-		fi; \
+			python3 ./omz_downloader --name $$model -o $(abspath $(MODEL_DIR)); \
+			python3 ./omz_converter --name $$model -d $(abspath $(MODEL_DIR)) -o $(abspath $(MODEL_DIR)); \
+ 		fi; \
 	done \
 	&& deactivate
 
@@ -67,12 +67,6 @@ $(VENV_DIR)/.INSTALLATION_OK:
 	python3 -m venv $(VENV_DIR) \
 	&& source $(VENV_DIR)/bin/activate \
 	&& pip install --upgrade pip \
-	&& pushd $(OPENVINO_DIR)/deployment_tools/open_model_zoo/tools/downloader \
-	&& python3 -mpip install -r ./requirements.in \
-	&& popd \
-	&& pushd $(OPENVINO_DIR)/deployment_tools/model_optimizer \
-	&& pip3 install -r requirements.txt \
-	&& popd \
 	&& deactivate \
 	&& touch $@
 
@@ -81,7 +75,6 @@ benchmark_app.manifest: benchmark_app.manifest.template
 		-Dlog_level=$(GRAMINE_LOG_LEVEL) \
 		-Darch_libdir=$(ARCH_LIBDIR) \
 		-Dopenvino_dir=$(abspath $(OPENVINO_DIR)) \
-		-Dinference_engine_cpp_samples_build=$(abspath $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)) \
 		$< > $@
 
 # Make on Ubuntu <= 20.04 doesn't support "Rules with Grouped Targets" (`&:`),
@@ -96,17 +89,13 @@ sgx_sign: benchmark_app.manifest | benchmark_app
 		--manifest $< \
 		--output $<.sgx
 
-benchmark_app: $(OPENVINO_DIR)
-	mkdir -p $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)
-	cd $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD) \
-	&& cmake -DCMAKE_BUILD_TYPE=Release $(OPENVINO_DIR)/inference_engine/samples/cpp \
-	&& make
-	ln -s $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)/intel64/Release/benchmark_app $@
+benchmark_app: $(OPENVINO_DIR)/bin/benchmark_app
+	ln -s $(OPENVINO_DIR)/bin/benchmark_app $@
 
 .PHONY: clean
 clean:
-	$(RM) *.manifest *.manifest.sgx *.token *.sig benchmark_app
-
+	$(RM) -r $(MODEL_DIR) $(VENV_DIR)
+	
 .PHONY: distclean
 distclean: clean
 	$(RM) -r $(MODEL_DIR) $(VENV_DIR) $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)
diff --git a/openvino/benchmark_app.manifest.template b/openvino/benchmark_app.manifest.template
index d5e2404..54665ed 100644
--- a/openvino/benchmark_app.manifest.template
+++ b/openvino/benchmark_app.manifest.template
@@ -6,19 +6,21 @@ libos.entrypoint = "benchmark_app"
 
 loader.log_level = "{{ log_level }}"
 
-loader.env.LD_LIBRARY_PATH = "/lib:{{ openvino_dir }}/deployment_tools/inference_engine/external/tbb/lib:{{ openvino_dir }}/deployment_tools/inference_engine/lib/intel64:{{ openvino_dir }}/opencv/lib:{{ openvino_dir }}/deployment_tools/ngraph/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
+loader.env.LD_LIBRARY_PATH = "/lib:/usr/lib:{{ openvino_dir }}/lib:{{ openvino_dir }}/lib64:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
 
 fs.mounts = [
   { uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
   { uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
   { uri = "file:/usr/{{ arch_libdir }}", path = "/usr/{{ arch_libdir }}" },
+  { uri = "file:/usr/lib", path = "/usr/lib" },
   { uri = "file:/etc", path = "/etc" },
-  { uri = "file:{{ openvino_dir }}", path = "{{ openvino_dir }}" },
-  { uri = "file:{{ inference_engine_cpp_samples_build }}", path = "{{ inference_engine_cpp_samples_build }}" },
+  { uri = "file:{{ openvino_dir }}", path = "{{ openvino_dir }}" }
 ]
 
 loader.insecure__use_cmdline_argv = true
 
+sys.stack.size = "1M"
+
 sgx.enclave_size = "32G"
 sgx.max_threads = {{ '1' if env.get('EDMM', '0') == '1' else '196' }}
 sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
@@ -31,12 +33,11 @@ sgx.trusted_files = [
   "file:{{ gramine.libos }}",
   "file:{{ gramine.runtimedir() }}/",
   "file:{{ arch_libdir }}/",
+  "file:/usr/lib/",
   "file:/usr/{{ arch_libdir }}/",
-  "file:{{ openvino_dir }}/deployment_tools/inference_engine/lib/intel64/",
-  "file:{{ openvino_dir }}/deployment_tools/inference_engine/external/tbb/lib/",
-  "file:{{ openvino_dir }}/opencv/lib/",
-  "file:{{ openvino_dir }}/deployment_tools/ngraph/lib/",
-  "file:{{ inference_engine_cpp_samples_build }}/intel64/Release/lib/",
+  "file:{{ openvino_dir }}/lib/",
+  "file:{{ openvino_dir }}/lib64/",
+  "file:{{ openvino_dir }}/bin/",
   "file:model/",
 ]
 
@@ -47,4 +48,5 @@ sgx.allowed_files = [
   "file:/etc/nsswitch.conf",
   "file:/etc/passwd",
   "file:output.txt",
+  "file:{{ openvino_dir }}/pyvenv.cfg",
 ]
