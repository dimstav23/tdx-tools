diff --git a/openvino/Makefile b/openvino/Makefile
index 4a5ef25..6e9fc59 100644
--- a/openvino/Makefile
+++ b/openvino/Makefile
@@ -3,27 +3,24 @@
 
 SHELL := /bin/bash # use bash syntax to activate virtual environment and to download models
 
-OPENVINO_DIR ?= $(INTEL_OPENVINO_DIR)
-
 THIS_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
 
 ARCH_LIBDIR ?= /lib/$(shell $(CC) -dumpmachine)
 
-INFERENCE_ENGINE_CPP_SAMPLES_BUILD ?= $(THIS_DIR)inference_engine_cpp_samples_build
+USER_HOME_DIR := $(HOME)
 
-MODEL_DIR ?= $(THIS_DIR)/model
+OPENVINO_DIR ?= $(THIS_DIR)/openvino_env
+
+OPEN_MODEL_ZOO_DIR ?= $(THIS_DIR)/open_model_zoo
 
-INTEL_MODELS = \
-	bert-large-uncased-whole-word-masking-squad-0001 \
-	bert-large-uncased-whole-word-masking-squad-int8-0001
+DOWNLOADER_SCRIPT ?= $(OPEN_MODEL_ZOO_DIR)/tools/model_tools/downloader.py
+CONVERTER_BIN ?= $(OPENVINO_DIR)/bin/ovc
+
+MODEL_DIR ?= $(THIS_DIR)/model
 
-PUBLIC_MODELS = \
-	resnet-50-tf \
-	brain-tumor-segmentation-0001 \
-	brain-tumor-segmentation-0002 \
-	ssd_mobilenet_v1_coco
+MODEL_NAME = resnet-50-tf
 
-VENV_DIR ?= $(THIS_DIR)/openvino
+VENV_DIR ?= $(THIS_DIR)/openvino_env
 
 ifeq ($(DEBUG),1)
 GRAMINE_LOG_LEVEL = debug
@@ -32,34 +29,20 @@ GRAMINE_LOG_LEVEL = error
 endif
 
 .PHONY: all
-all: benchmark_app benchmark_app.manifest $(VENV_DIR)/.INSTALLATION_OK intel_models public_models
+all:  $(VENV_DIR)/.INSTALLATION_OK benchmark_app MODEL_NAME benchmark_app.manifest
 ifeq ($(SGX),1)
 all: benchmark_app.manifest.sgx benchmark_app.sig
 endif
 
-.PHONY: intel_models
-intel_models: $(VENV_DIR)/.INSTALLATION_OK
-	@source $(VENV_DIR)/bin/activate \
-	&& cd $(OPENVINO_DIR)/deployment_tools/open_model_zoo/tools/downloader \
-	&& for model in $(INTEL_MODELS); do \
-		if [ ! -d $(abspath $(MODEL_DIR))/intel/$$model ]; then \
-			python3 ./downloader.py --name $$model -o $(abspath $(MODEL_DIR)); \
-			python3 ./converter.py --name $$model -d $(abspath $(MODEL_DIR)) -o $(abspath $(MODEL_DIR)); \
-		fi; \
-	done \
-	&& deactivate
-
-.PHONY: public_models
-public_models: $(VENV_DIR)/.INSTALLATION_OK
-	@source $(VENV_DIR)/bin/activate \
-	&& cd $(OPENVINO_DIR)/deployment_tools/open_model_zoo/tools/downloader \
-	&& for model in $(PUBLIC_MODELS); do \
-		if [ ! -d $(abspath $(MODEL_DIR))/public/$$model ]; then \
-			python3 ./downloader.py --name $$model -o $(abspath $(MODEL_DIR)); \
-			python3 ./converter.py --name $$model -d $(abspath $(MODEL_DIR)) -o $(abspath $(MODEL_DIR)); \
-		fi; \
-	done \
-	&& deactivate
+.PHONY: MODEL_NAME
+MODEL_NAME: $(VENV_DIR)/.INSTALLATION_OK
+	cd $(THIS_DIR) && \
+	if [ ! -d $(abspath $(OPEN_MODEL_ZOO_DIR)) ]; then \
+		git clone https://github.com/openvinotoolkit/open_model_zoo.git $(abspath $(OPEN_MODEL_ZOO_DIR)); \
+	fi && \
+	mkdir -p $(MODEL_DIR) && \
+	python $(DOWNLOADER_SCRIPT) --name $(MODEL_NAME) --output_dir $(MODEL_DIR) && \
+	$(CONVERTER_BIN) $(MODEL_DIR)/public/resnet-50-tf/resnet_v1-50.pb --output_model $(MODEL_DIR)
 
 .PRECIOUS: $(VENV_DIR)/.INSTALLATION_OK
 $(VENV_DIR)/.INSTALLATION_OK:
@@ -67,12 +50,7 @@ $(VENV_DIR)/.INSTALLATION_OK:
 	python3 -m venv $(VENV_DIR) \
 	&& source $(VENV_DIR)/bin/activate \
 	&& pip install --upgrade pip \
-	&& pushd $(OPENVINO_DIR)/deployment_tools/open_model_zoo/tools/downloader \
-	&& python3 -mpip install -r ./requirements.in \
-	&& popd \
-	&& pushd $(OPENVINO_DIR)/deployment_tools/model_optimizer \
-	&& pip3 install -r requirements.txt \
-	&& popd \
+	&& pip install openvino \
 	&& deactivate \
 	&& touch $@
 
@@ -81,7 +59,7 @@ benchmark_app.manifest: benchmark_app.manifest.template
 		-Dlog_level=$(GRAMINE_LOG_LEVEL) \
 		-Darch_libdir=$(ARCH_LIBDIR) \
 		-Dopenvino_dir=$(abspath $(OPENVINO_DIR)) \
-		-Dinference_engine_cpp_samples_build=$(abspath $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)) \
+		-Dhome_dir=$(abspath $(USER_HOME_DIR)) \
 		$< > $@
 
 # Make on Ubuntu <= 20.04 doesn't support "Rules with Grouped Targets" (`&:`),
@@ -96,17 +74,13 @@ sgx_sign: benchmark_app.manifest | benchmark_app
 		--manifest $< \
 		--output $<.sgx
 
-benchmark_app: $(OPENVINO_DIR)
-	mkdir -p $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)
-	cd $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD) \
-	&& cmake -DCMAKE_BUILD_TYPE=Release $(OPENVINO_DIR)/inference_engine/samples/cpp \
-	&& make
-	ln -s $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)/intel64/Release/benchmark_app $@
+benchmark_app: $(OPENVINO_DIR)/bin/benchmark_app
+	ln -s $(OPENVINO_DIR)/bin/benchmark_app $@
 
 .PHONY: clean
 clean:
-	$(RM) *.manifest *.manifest.sgx *.token *.sig benchmark_app
+	$(RM) -r benchmark_app.manifest benchmark_app.manifest.sgx benchmark_app.sig $(MODEL_DIR)
 
 .PHONY: distclean
 distclean: clean
-	$(RM) -r $(MODEL_DIR) $(VENV_DIR) $(INFERENCE_ENGINE_CPP_SAMPLES_BUILD)
+	$(RM) -r $(MODEL_DIR) $(VENV_DIR) $(OPEN_MODEL_ZOO_DIR)
diff --git a/openvino/benchmark_app.manifest.template b/openvino/benchmark_app.manifest.template
index d5e2404..2f0b844 100644
--- a/openvino/benchmark_app.manifest.template
+++ b/openvino/benchmark_app.manifest.template
@@ -6,19 +6,22 @@ libos.entrypoint = "benchmark_app"
 
 loader.log_level = "{{ log_level }}"
 
-loader.env.LD_LIBRARY_PATH = "/lib:{{ openvino_dir }}/deployment_tools/inference_engine/external/tbb/lib:{{ openvino_dir }}/deployment_tools/inference_engine/lib/intel64:{{ openvino_dir }}/opencv/lib:{{ openvino_dir }}/deployment_tools/ngraph/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
+loader.env.LD_LIBRARY_PATH = "/lib:/usr/lib:{{ openvino_dir }}/lib:{{ openvino_dir }}/lib64:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
 
 fs.mounts = [
   { uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
   { uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
   { uri = "file:/usr/{{ arch_libdir }}", path = "/usr/{{ arch_libdir }}" },
+  { uri = "file:/usr/lib", path = "/usr/lib" },
   { uri = "file:/etc", path = "/etc" },
   { uri = "file:{{ openvino_dir }}", path = "{{ openvino_dir }}" },
-  { uri = "file:{{ inference_engine_cpp_samples_build }}", path = "{{ inference_engine_cpp_samples_build }}" },
+  { uri = "file:{{ home_dir }}/intel/openvino_telemetry", path = "/root/intel/openvino_telemetry" },
 ]
 
 loader.insecure__use_cmdline_argv = true
 
+sys.stack.size = "1M"
+
 sgx.enclave_size = "32G"
 sgx.max_threads = {{ '1' if env.get('EDMM', '0') == '1' else '196' }}
 sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
@@ -31,13 +34,13 @@ sgx.trusted_files = [
   "file:{{ gramine.libos }}",
   "file:{{ gramine.runtimedir() }}/",
   "file:{{ arch_libdir }}/",
+  "file:/usr/lib/",
   "file:/usr/{{ arch_libdir }}/",
-  "file:{{ openvino_dir }}/deployment_tools/inference_engine/lib/intel64/",
-  "file:{{ openvino_dir }}/deployment_tools/inference_engine/external/tbb/lib/",
-  "file:{{ openvino_dir }}/opencv/lib/",
-  "file:{{ openvino_dir }}/deployment_tools/ngraph/lib/",
-  "file:{{ inference_engine_cpp_samples_build }}/intel64/Release/lib/",
+  "file:{{ openvino_dir }}/lib/",
+  "file:{{ openvino_dir }}/lib64/",
+  "file:{{ openvino_dir }}/bin/",
   "file:model/",
+  "file:{{ home_dir }}/intel/openvino_telemetry",
 ]
 
 sgx.allowed_files = [
@@ -47,4 +50,5 @@ sgx.allowed_files = [
   "file:/etc/nsswitch.conf",
   "file:/etc/passwd",
   "file:output.txt",
+  "file:{{ openvino_dir }}/pyvenv.cfg",
 ]
